[build-system]
    requires = ["poetry>=0.12"]
    build-backend = "poetry.masonry.api"


# -- POETRY CONFIG ---------------------------------------------------------------------
[tool.poetry]
    name = "commit-msg-jira-hook"
    version = "1.1.2"
    description = "commit-msg hook for jira issue verification with pre-commit."
    authors = ["Cielquan <cielquan@protonmail.com>"]
    license = "GPL-3.0-or-later"
    keywords = ["pre-commit", "hook", "git", "commit-msg"]
    classifiers = [
        "Development Status :: 4 - Beta",
        "Intended Audience :: Developers",
        "Topic :: Software Development :: Version Control :: Git",
    ]
    repository = "https://github.com/Cielquan/commit-msg-jira-hook"
    readme = "README.rst"
    packages = [
        { include = "commit_msg_jira_hook", from = "src" },
    ]

    [tool.poetry.dependencies]
        python = "^3.6.1"
        importlib-metadata = {version = "^1.6", python = "<3.8"}
        jira = "^2.0.0"
        click = "^7.1.2"
        gitpython = "^3.1.7"
        #: Testing
        pytest = {version = ">=6", optional = true}
        pytest-xdist = {version = ">=1.34", optional = true}
        pytest-cov = {version = ">=2.10", optional = true}
        coverage = {extras = ["toml"], version = ">=5.2.1", optional = true}
        pytest-sugar = {version = ">=0.9.4", optional = true}
        pytest-randomly = {version = ">=3.4", optional = true}
        #: Code check
        pre-commit = {version = ">=2.4", optional = true}
        mypy = {version = ">=0.782", optional = true}
        pylint = {version = ">=2.5.3", optional = true}

        [tool.poetry.dev-dependencies]
            devtools = {version = ">=0.6", extras = ["pygments"]}
            towncrier = {version = "19.9.0rc1"}
            ipython = ">=7.15.0"

        [tool.poetry.extras]
            testing = [
                "pytest", "pytest-xdist",
                "pytest-cov", "coverage",
                "pytest-sugar",
                "pytest-randomly",
                "pytest-mock", "mock",
            ]
            pre-commit = ["pre-commit", "mypy", "pylint"]
            linter = [
                "mypy", "pylint", "flake8", "bandit",
                "pydocstyle", "rstcheck"
                ]  #: for VSCode

        [tool.poetry.scripts]
            jira_commit_msg = "commit_msg_jira_hook.check_jira_tag:main"
            jira_prepare_commit_msg = "commit_msg_jira_hook.add_jira_tag:main"


# -- TOWNCRIER CONFIG ------------------------------------------------------------------
[tool.towncrier]
    package = "commit_msg_jira_hook"
    package_dir = "src"
    filename = "CHANGELOG.rst"
    directory = "docs/.changes"
    template = "docs/.changes/template.jinja2"
    title_format = "v{version} ({project_date})"
    issue_format = "`#{issue} <https://github.com/cielquan/commit-msg-jira-hook/issues/{issue}>`_"
    underlines = ["-", "~"]
    wrap = false  # Wrap text to 79 characters
    all_bullets = true  # make all fragments bullet points

    [[tool.towncrier.type]]
        directory = "bugfix"
        name = "Bugfixes"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "feat"
        name = "New Features"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "breaking"
        name = "Backwards incompatible changes"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "depr"
        name = "Deprecations (removal in next major release)"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "docs"
        name = "Documentation"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "misc"
        name = "Miscellaneous"
        showcontent = true


#: -- BLACK CONFIG ---------------------------------------------------------------------
[tool.black]
    line-length = 88
    exclude = "venv/"
    include = '\.pyi?$'


#: -- ISORT CONFIG ---------------------------------------------------------------------
[tool.isort]
    profile = "black"
    lines_after_imports = 2
    lines_between_types = 1
    skip_gitignore = true


#: -- PYLINT CONFIG --------------------------------------------------------------------
[tool.pylint.master]
    additional-builtins = "tags"

[tool.pylint.messages_control]
    disable = "C0330, C0326"  #: deactivated for black

[tool.pylint.format]
    max-line-length = "88"


#: -- COVERAGE CONFIG ------------------------------------------------------------------
[tool.coverage]
    [tool.coverage.run]
        branch = true
        parallel = true
        context = "static-context"
        omit = [
            "tests/*",
            "docs/*",
        ]

    [tool.coverage.paths]
        combine = [
            "src/commit_msg_jira_hook",
            "*/.tox/*/lib/python*/site-packages/commit_msg_jira_hook",
            "*/.tox/pypy*/site-packages/commit_msg_jira_hook",
            "*/.tox\\*\\Lib\\site-packages\\commit_msg_jira_hook",
            "*/src/commit_msg_jira_hook",
            "*\\src\\commit_msg_jira_hook",
        ]

    [tool.coverage.report]
        #fail_under = 100
        show_missing = true
        exclude_lines = [
            "# pragma: no cover",
            "if __name__ == ['\"]__main__['\"]:",
            "def __str__",
            "def __repr__",
            "if self.debug:",
            "if settings.DEBUG",
            "if 0:",
            "if False:",
            "if TYPE_CHECKING:",
            "if MYPY:",
        ]

    [tool.coverage.html]
        show_contexts = true


#: -- PYTEST CONFIG --------------------------------------------------------------------
[tool.pytest.ini_options]
    addopts = "-ra --showlocals"
    mock_use_standalone_module = true
    junit_family = "xunit2"
